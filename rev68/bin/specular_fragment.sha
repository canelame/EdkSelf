#version 330
in vec3 o_normal; 
in vec3 o_toLight; 
in vec3 o_toCamera; 
    
out vec4 resultingColor; 
    
vec3 u_lightAmbientIntensity = vec3(0.6, 0.3, 0); 
vec3 u_lightDiffuseIntensity = vec3(1, 0.5, 0);
vec3 u_lightSpecularIntensity = vec3(0, 1, 0);
    
vec3 u_matAmbientReflectance = vec3(1, 1, 1);
vec3 u_matDiffuseReflectance = vec3(1, 1, 1);
vec3 u_matSpecularReflectance = vec3(1, 1, 1);
float u_matShininess = 300;
    
vec3 ambientLighting(){ 
    return u_matAmbientReflectance * u_lightAmbientIntensity; 
}

vec3 diffuseLighting(in vec3 N, in vec3 L){ 
    float diffuseTerm = clamp(dot(N, L), 0, 1); 
    return u_matDiffuseReflectance * u_lightDiffuseIntensity * diffuseTerm; 
}

vec3 specularLighting(in vec3 N, in vec3 L, in vec3 V){
    float specularTerm = 0; 
    if(dot(N, L) > 0){
        vec3 H = normalize(L+V);
        specularTerm = pow(dot(N, H), u_matShininess);
    }
    return u_matSpecularReflectance * u_lightSpecularIntensity * specularTerm;
}

void main(){
    vec3 L = normalize(o_toLight);
    vec3 V = normalize(o_toCamera);
    vec3 N = normalize(o_normal);

    resultingColor.xyz = diffuseLighting(N, L) + specularLighting(N, L, V);
    resultingColor.a = 1;
}